use crate::graphical::GraphicalData;
use crate::sixdof::{self, *};
use crate::{components, datatypes::{self, *}};
use crate::fc::{self, *};
use crate::components::*;

pub fn test_falling_object() -> Box<sixdof::Vehicle<8>> {
    let mut drone = Box::new(sixdof::Vehicle::<8>::new());
    let A_new = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    ]);
    let state_new = na::SMatrix::<f64, 12, 1>::from_row_slice(&[
        0.0,    // x
        0.0,    // y
        0.0,    // z
        0.0,    // xdot
        0.0,    // ydot
        0.0,    // zdot
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]);
    let C_new = na::SMatrix::<f64, 6, 12>::from_row_slice(&[
        1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    ]);
    // A[0, 0] = 1./0;

    drone.set_A(
        A_new
    );



    // let Rocket = Box::new(sixdof::Rocket::new());
    drone.set_state(state_new);


    return drone;
}

pub fn non_falling_obect() -> Box<sixdof::Vehicle<1>> {

    let mut drone = Box::new(sixdof::Vehicle::<1>::new());
    let A_new = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    ]);
    let B_new = na::SMatrix::<f64, 12, 1>::from_row_slice(&[
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
    ]);
    let state_new = na::SMatrix::<f64, 12, 1>::from_row_slice(&[
        0.0,    // x
        0.0,    // y
        0.0,    // z
        0.0,    // xdot
        0.0,    // ydot
        0.0,    // zdot
        0.0,    
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]);
    let C_new = na::SMatrix::<f64, 6, 12>::from_row_slice(&[
        1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    ]);
    // A[0, 0] = 1./0;

    drone.set_A(A_new);
    drone.set_B(B_new);
    drone.set_C(C_new);



    // let Rocket = Box::new(sixdof::Rocket::new());
    drone.set_state(state_new);
    
    drone.add_component(
        Box::new(components::IdealThruster::new())
    );

    let mut flight_computer = FlightComputer::new(
        1.0E-3, 
        vec![], 
        na::SMatrix::<f64, 1, 12>::from_row_slice(&[
            0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
            ]),
        Box::new(fc::ZeroGuidance::new())
    );
    drone.add_flight_controller(Box::new(flight_computer));

    return drone;
}

pub fn blizzard_model() -> Box<sixdof::Vehicle<12>> {
    let mut blizzard = sixdof::Vehicle::<12>::new();
    let mass = 2200.0;
    blizzard.set_mass(mass);
    let A_new = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    ]);

    let mut I = na::Matrix3::new(
        600.0, 0.0, 0.0,
        0.0, 800.0, 0.0,
        0.0, 0.0, 800.0);
    
    I = I.try_inverse().unwrap();

    let mut B_new = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 1.0/mass, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0/mass, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0/mass, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, I[(0,0)], I[(0,1)], I[(0,2)],
        // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, I[(1,0)], I[(1,1)], I[(1,2)],
        // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, I[(2,0)], I[(2,1)], I[(2,2)],
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    ]);

    blizzard.set_A(A_new);
    blizzard.set_B(B_new);
    // for i in (0..8) {
    //     blizzard.add_component(
    //         Box::new(sixdof::IdealThruster::new())
    //     );
    // }

    let K = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        2.39146102238638e-10,1.49680200277406e-09,-1.69486569183505e-09,9.77008774915849e-11,-2.03553564805431e-10,-1.11523208254096e-09,-1.03988761586791e-11,-5.18665549908651e-10,-7.637883604514e-11,1.92456693240155e-11,-7.58434776444589e-11,-1.57317968479442e-10,
        5.17590381737457e-11,1.39263923082261e-10,-4.8256068754903e-10,-2.01296196675244e-11,1.22415693672423e-10,-6.45684743561364e-10,-2.48973062534261e-12,-5.44739790758713e-12,7.69102768639629e-11,9.07923114613084e-12,-5.07169392034426e-11,1.3693095092418e-10,
        -2.8310363023043e-10,-1.12401173141067e-10,-1.79446367421359e-09,-2.73270497279955e-10,2.69129783863538e-10,-2.0120887607555e-10,-1.00505020192486e-11,-7.63102843617098e-12,4.25139409583925e-12,-9.0156535115969e-12,-4.44645510285381e-12,-9.30122947404509e-12,
        2828427.12474619,-1.70706313212417e-10,3.43200207979604e-09,2830826.10737551,9.90345853965724e-11,-3.69789637772029e-10,-2.16163553512247e-07,-2.33808234508031e-08,-5.46065895366728e-08,-1.54782036761817e-09,-1.33326329111899e-09,7.51169386254065e-09,
        -1.13068788848746e-09,2828427.12474619,-1.84640501857335e-08,-2.06613841716925e-09,2830826.10737551,-1.00038094276803e-08,1.56179853662797e-09,1.38409083551122e-08,1.85938491617165e-09,-2.15115777680082e-09,-3.86093744000107e-09,1.72259456098965e-09,
        2.24473938483277e-09,-5.7139067374654e-09,2828427.12474622,2.85251911876081e-09,4.08993215427607e-09,2830826.10737553,3.60558085909055e-08,-9.72073026322217e-08,5.4115423210362e-08,3.33464851978012e-09,4.33959751871091e-09,1.85802755419721e-09,
        -3.07383385611902e-11,-1.13827245729175e-10,7.36291144963706e-10,3.97496535884555e-11,6.90250349630005e-11,1.1437194144694e-09,1.6488682114874e-11,4.51618421322574e-09,2.61151263317788e-10,-1.72079345934903e-11,1.05547987451159e-10,2.2704894606405e-10,
        -1.05164212006509e-11,1.29309656858617e-10,7.2847814174452e-12,-3.20208499724125e-13,-3.67144555506277e-10,3.95873989522142e-10,1.79692839900572e-09,-3.9252156522937e-11,-1.43590655424685e-11,-4.72716327085312e-13,-1.76506143724662e-11,3.8396016592255e-13,
        -1.80944036750348e-12,-2.67212640150591e-11,3.75476397990323e-10,6.18368260191581e-12,-1.33292538819494e-12,-2.20844647688208e-12,6.63506208382561e-12,-2.89856077013332e-12,-4.53293476376138e-11,-3.77461714455803e-13,-6.14877606626557e-16,-1.09278610725096e-10,
        1.67402778767402e-09,-1.30050659227875e-07,-8.13244235019855e-08,-1.09410081813123e-10,7.03078140338659e-10,7.36841154833997e-09,2828427.12474618,1.22524625064471e-08,1.76763632738583e-08,2829227.01164109,1.76050981712735e-09,1.0695294833709e-08,
        5.16407571839349e-09,1.24628688264137e-08,-1.14867024402945e-08,1.79571474396877e-09,-1.9233245875918e-09,3.61226232462243e-10,-3.7133135814073e-09,2828427.12474622,3.49452240164811e-08,-3.62397907992667e-10,2829027.0611201,3.78412748606439e-08,
        3.56529836186594e-09,4.39666776956721e-10,5.92297568274087e-09,-3.8405569581675e-10,4.0932846417506e-09,3.595417275685e-09,-2.06896572549407e-09,1.23078748940182e-08,2828427.12474618,-2.32004924726112e-10,-1.25667551388605e-09,2829027.06112007,
]);

    // let K = na::SMatrix::<f64, 12, 12>::zeros();

    let fc = FlightComputer::<12>::new(1E-9, vec![], K, Box::new(fc::ZeroGuidance::new()));
    blizzard.add_flight_controller(Box::new(fc));
 
    return Box::new(blizzard);
}

pub fn static_cube() -> Box<sixdof::Vehicle<1>> {
    let mut cube = sixdof::Vehicle::<1>::new();
    cube.set_mass(1.0);
    cube.set_physics_type(sixdof::PhysicsType::Static);
    cube.set_model(GraphicalData::new("StaticCube", "data/test_object/default_cube.obj", [0.0, 1.0, 1.0, 1.0]));
    cube.set_id(1);
    


    return Box::new(cube);
}

pub fn static_earth_obj() -> Box<sixdof::Vehicle<1>> {
    let mut earth = sixdof::Vehicle::<1>::new();
    earth.set_mass(0.0);
    earth.set_physics_type(sixdof::PhysicsType::Static);
    let mut model = GraphicalData::new(
        "static_Earth", "data/test_object/default_sphere.obj", [0.0, 0.0, 1.0, 1.0]);

    let scale_factor = 6.378E6*datatypes::GRAPHICAL_SCALING_FACTOR;
    model.set_scale([scale_factor, scale_factor, scale_factor]);
    earth.set_model(
        model
    );
    earth.set_id(0);
    earth.set_name("earth");

    return Box::new(earth);
}

pub fn ISS() -> Box<sixdof::Vehicle<1>> {
    let mut ISS = sixdof::Vehicle::new();
    ISS.set_mass(420.0E3);
    
    let mut model = GraphicalData::new("ISS", "data/test_object/default_cube.obj", [1.0, 0.0, 0.0, 1.0]);
    let scale_factor = 100E3*datatypes::GRAPHICAL_SCALING_FACTOR;
    model.set_scale([scale_factor, scale_factor, scale_factor]);
    ISS.set_model(model);

    let state_initial = na::SMatrix::<f64, 12, 1>::from_row_slice(&[
        0.0,    // x
        400.0E3+6.378E6,// y
        0.0,    // z
        7.67E3,    // xdot
        0.0,    // ydot
        0.0,    // zdot
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]);

    let A_new = na::SMatrix::<f64, 12, 12>::from_row_slice(&[
        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    ]);

    ISS.set_A(A_new);

    ISS.set_physics_type(sixdof::PhysicsType::StateSpace);
    ISS.set_id(2);
    ISS.set_state(state_initial);
    ISS.set_name("ISS");
    return Box::new(ISS)
}